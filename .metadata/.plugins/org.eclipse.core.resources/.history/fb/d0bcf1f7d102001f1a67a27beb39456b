package com.ezen.test.service;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.ezen.test.domain.MemberVO;
import com.ezen.test.repository.MemberDAO;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequiredArgsConstructor
@Slf4j
@Service
public class MemberServiceImpl implements MemberService {

	private final MemberDAO mdao;

	// 암호화 관련
	final BCryptPasswordEncoder passwordEncoder;
	
	@Override
	public int insert(MemberVO mvo) {
		// id가 중복되는지 여부를 체크하여, 회원가입 여부를 결정
		// mvo를 가져왔지만, id만 주고 db에서 일치하는 mvo객체가 있는지 체크하여 mvo객체를 리턴 > 일치하는 객체가 있다면, 가입실패 / 없다면, 가입성공(단, controller에서 처리해도 무방)
		MemberVO tempMvo = mdao.getUser(mvo.getId());
		if(tempMvo != null) {
			// 중복아이디가 있는 경우
			return 0;
		}
		// 중복아이디가 없는 경우 회원가입 처리
		// 아이디/패스워드가 null이거나, 값이 없다면 가입 불가
		if(mvo.getId( )== null || mvo.getId().length() == 0) {
			return 0;
		}
		if(mvo.getPw() == null || mvo.getPw().length() == 0) {
			return 0;
		}
		// 회원가입 처리
		// 가입 시 password는 암호화 처리
		// encode() : 암호화 / matches(입력된 비밀번호, 암호화된 비밀번호) > boolean 리턴
		
		return 0;
	}
	
	
	
	
}
